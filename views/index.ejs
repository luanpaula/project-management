<link rel="stylesheet" href="/styles.css">

<% if (projetos.length===0) { %>
  <div class="welcome-message fade-in">
    <h2>Bem-vindo ao seu painel!</h2>
    <p>Aqui você pode gerenciar seus projetos com facilidade.</p>
  </div>
  <% } else { %>
    <div class="projects-header fade-in">
      <h2>Seus Projetos</h2>
      <a href="/create" class="new-project-btn">
        Novo Projeto +
      </a>
    </div>

    <div class="table-container fade-in">
      <table class="projects-table">
        <thead>
          <tr>
            <th>Projeto</th>
            <th>Status</th>
            <th>Início</th>
            <th>Prazo</th>
            <th>Conclusão</th>
          </tr>
        </thead>

        <tbody>
          <% projetos.forEach((proj)=> { %>
            <tr class="project-row" id="projeto-<%= proj.id %>" data-projeto-id="<%= proj.id %>">
              <td class="project-name-cell">
                <button onclick='toggleTarefas("<%= proj.id %>")' class="toggle-btn">
                  <span id="icone-<%= proj.id %>">▸</span>
                </button>
                <input type="text" class="table-input auto-save" data-tipo="projeto" data-projeto-id="<%= proj.id %>"
                  data-campo="nome" value="<%= proj.nome %>">
              </td>
              <td>
                <select class="table-input auto-save" data-tipo="projeto" data-projeto-id="<%= proj.id %>"
                  data-campo="status">
                  <option value=""></option>
                  <option value="Não iniciado" <%=proj.status==="Não iniciado" ? "selected" : "" %>>Não iniciado
                  </option>
                  <option value="Em andamento" <%=proj.status==="Em andamento" ? "selected" : "" %>>Em andamento
                  </option>
                  <option value="Concluído" <%=proj.status==="Concluído" ? "selected" : "" %>>Concluído</option>
                  <option value="Cancelado" <%=proj.status==="Cancelado" ? "selected" : "" %>>Cancelado</option>
                </select>
              </td>
              <td>
                <input type="date" class="table-input auto-save" data-tipo="projeto" data-projeto-id="<%= proj.id %>"
                  data-campo="dataInicio" value="<%= proj.dataInicio %>">
              </td>
              <td>
                <input type="date" class="table-input auto-save" data-tipo="projeto" data-projeto-id="<%= proj.id %>"
                  data-campo="dataPrazo" value="<%= proj.dataPrazo %>">
              </td>
              <td>
                <input type="date" class="table-input auto-save" data-tipo="projeto" data-projeto-id="<%= proj.id %>"
                  data-campo="dataConclusao" value="<%= proj.dataConclusao %>">
              </td>
            </tr>

            <tr id="tarefas-<%= proj.id %>" class="hidden nested-container">
              <td colspan="5">
                <table class="nested-table">
                  <thead>
                    <tr>
                      <th class="checkbox-col">✓</th>
                      <th>Tarefa</th>
                      <th>Status</th>
                      <th>Início</th>
                      <th>Prazo</th>
                      <th>Conclusão</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% proj.tarefas.forEach((tarefa)=> { %>
                      <tr class="task-row">
                        <td class="checkbox-col">
                          <input type="checkbox" class="auto-save" data-tipo="tarefa" data-projeto-id="<%= proj.id %>"
                            data-tarefa-id="<%= tarefa.id %>" data-campo="concluida" <%=tarefa.concluida ? "checked"
                            : "" %>>
                        </td>
                        <td class="task-name-cell">
                          <button onclick='toggleSubtarefas("<%= proj.id %>", "<%= tarefa.id %>")'
                            class="toggle-btn small">
                            <span id="icone-sub-<%= proj.id %>-<%= tarefa.id %>">▸</span>
                          </button>
                          <input type="text" class="table-input auto-save" data-tipo="tarefa"
                            data-projeto-id="<%= proj.id %>" data-tarefa-id="<%= tarefa.id %>" data-campo="titulo"
                            value="<%= tarefa.titulo %>">
                        </td>
                        <td>
                          <select class="table-input auto-save" data-tipo="tarefa" data-projeto-id="<%= proj.id %>"
                            data-tarefa-id="<%= tarefa.id %>" data-campo="status">
                            <option value=""></option>
                            <option value="Não iniciado" <%=tarefa.status==="Não iniciado" ? "selected" : "" %>>Não
                              iniciado</option>
                            <option value="Em andamento" <%=tarefa.status==="Em andamento" ? "selected" : "" %>>Em
                              andamento</option>
                            <option value="Concluído" <%=tarefa.status==="Concluído" ? "selected" : "" %>>Concluído
                            </option>
                            <option value="Cancelado" <%=tarefa.status==="Cancelado" ? "selected" : "" %>>Cancelado
                            </option>
                          </select>
                        </td>
                        <td>
                          <input type="date" class="table-input auto-save" data-tipo="tarefa"
                            data-projeto-id="<%= proj.id %>" data-tarefa-id="<%= tarefa.id %>" data-campo="dataInicio"
                            value="<%= tarefa.dataInicio || "" %>">
                        </td>
                        <td>
                          <input type="date" class="table-input auto-save" data-tipo="tarefa"
                            data-projeto-id="<%= proj.id %>" data-tarefa-id="<%= tarefa.id %>" data-campo="dataPrazo"
                            value="<%= tarefa.dataPrazo || "" %>">
                        </td>
                        <td>
                          <input type="date" class="table-input auto-save" data-tipo="tarefa"
                            data-projeto-id="<%= proj.id %>" data-tarefa-id="<%= tarefa.id %>"
                            data-campo="dataConclusao" value="<%= tarefa.dataConclusao || "" %>">
                        </td>
                      </tr>

                      <tr id="subtarefas-<%= proj.id %>-<%= tarefa.id %>" class="hidden">
                        <td colspan="6">
                          <table class="subtasks-table">
                            <thead>
                              <tr>
                                <th class="checkbox-col">✓</th>
                                <th>Subtarefa</th>
                              </tr>
                            </thead>
                            <tbody>
                              <% tarefa.subtarefas?.forEach((sub)=> { %>
                                <tr class="subtask-row">
                                  <td class="checkbox-col">
                                    <input type="checkbox" class="auto-save" data-tipo="subtarefa"
                                      data-projeto-id="<%= proj.id %>" data-tarefa-id="<%= tarefa.id %>"
                                      data-subtarefa-id="<%= sub.id %>" data-campo="concluida" <%=sub.concluida
                                      ? "checked" : "" %>>
                                  </td>
                                  <td>
                                    <input type="text" class="table-input auto-save" data-tipo="subtarefa"
                                      data-projeto-id="<%= proj.id %>" data-tarefa-id="<%= tarefa.id %>"
                                      data-subtarefa-id="<%= sub.id %>" data-campo="titulo" value="<%= sub.titulo %>">
                                  </td>
                                </tr>
                                <% }) %>
                                  <tr class="new-subtask-row">
                                    <td></td>
                                    <td colspan="2">
                                      <input type="text" placeholder="Nova subtarefa..." class="table-input placeholder"
                                        onkeydown='if(event.key === "Enter") criarSubtarefaSePreenchida(this, "<%= proj.id %>", "<%= tarefa.id %>")'>
                                    </td>
                                  </tr>
                            </tbody>
                          </table>
                        </td>
                      </tr>
                      <% }) %>

                        <tr class="new-task-row">
                          <td></td>
                          <td colspan="5">
                            <input type="text" placeholder="Nova tarefa..." class="table-input placeholder"
                              onblur='criarTarefaSePreenchida("<%= proj.id %>", this)'>
                          </td>
                        </tr>
                  </tbody>
                </table>
              </td>
            </tr>
            <% }) %>

              <tr class="new-project-row">
                <td colspan="5">
                  <input type="text" placeholder="Novo projeto..." class="table-input placeholder"
                    onblur="criarProjetoSePreenchido(this)">
                </td>
              </tr>
        </tbody>
      </table>
      <div id="context-menu" class="context-menu hidden">
        <ul>
          <li onclick="copiarId()"><i class="fa fa-clipboard"></i> Copiar ID</li>
          <li onclick="renomear()"><i class="fa fa-edit"></i> Renomear</li>
          <li onclick="duplicar()"><i class="fa fa-copy"></i> Duplicar</li>
          <li onclick="excluir()"><i class="fa fa-trash"></i> Excluir</li>
        </ul>
      </div>
    </div>

    <script>
      const EXPANDIDOS_PROJETOS_KEY = 'projetosExpandido';
      const EXPANDIDOS_SUBTAREFAS_KEY = 'subtarefasExpandido';

      // Restaurar visualização ao carregar a página
      document.addEventListener('DOMContentLoaded', () => {
        const projetos = JSON.parse(localStorage.getItem(EXPANDIDOS_PROJETOS_KEY)) || [];
        projetos.forEach(id => {
          const row = document.getElementById(`tarefas-${id}`);
          const icon = document.getElementById(`icone-${id}`);
          if (row && icon) {
            row.classList.remove('hidden');
            icon.textContent = '▾';
          }
        });

        const subtarefas = JSON.parse(localStorage.getItem(EXPANDIDOS_SUBTAREFAS_KEY)) || [];
        subtarefas.forEach(([projId, tarefaId]) => {
          const row = document.getElementById(`subtarefas-${projId}-${tarefaId}`);
          const icon = document.getElementById(`icone-sub-${projId}-${tarefaId}`);
          if (row && icon) {
            row.classList.remove('hidden');
            icon.textContent = '▾';
          }
        });
      });
      function toggleTarefas(projId) {
        const row = document.getElementById(`tarefas-${projId}`);
        const icon = document.getElementById(`icone-${projId}`);
        const lista = new Set(JSON.parse(localStorage.getItem(EXPANDIDOS_PROJETOS_KEY)) || []);

        const isHidden = row.classList.toggle('hidden');
        icon.textContent = isHidden ? '▸' : '▾';

        if (isHidden) {
          lista.delete(projId);
        } else {
          lista.add(projId);
        }

        localStorage.setItem(EXPANDIDOS_PROJETOS_KEY, JSON.stringify([...lista]));
      }

      function toggleSubtarefas(projId, tarefaId) {
        const row = document.getElementById(`subtarefas-${projId}-${tarefaId}`);
        const icon = document.getElementById(`icone-sub-${projId}-${tarefaId}`);
        const key = EXPANDIDOS_SUBTAREFAS_KEY;

        let lista = JSON.parse(localStorage.getItem(key)) || [];
        const index = lista.findIndex(([p, t]) => p === projId && t === tarefaId);

        const isHidden = row.classList.toggle('hidden');
        icon.textContent = isHidden ? '▸' : '▾';

        if (isHidden && index !== -1) {
          lista.splice(index, 1);
        } else if (!isHidden && index === -1) {
          lista.push([projId, tarefaId]);
        }

        localStorage.setItem(key, JSON.stringify(lista));
      }


      function concluirTarefa(projId, tarefaId, marcado) {
        fetch(`/projetos/${projId}/tarefas/${tarefaId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ campo: 'concluida', valor: marcado })
        })
          .then(res => {
            if (!res.ok) throw new Error("Erro ao marcar tarefa");
            return res.json();
          })
          .then(() => {
            mostrarPopup("Status da tarefa atualizado");
          })
          .catch(err => console.error(err));
      }

      function concluirSubtarefa(projId, tarefaId, subtarefaId, concluida) {
        fetch(`/projetos/${projId}/tarefas/${tarefaId}/subtarefas/${subtarefaId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ concluida })
        })
          .then(res => {
            if (!res.ok) throw new Error("Erro ao atualizar subtarefa");
            return res.json();
          })
          .then(data => {
            mostrarPopup("Status da subtarefa atualizado");
          })
          .catch(err => {
            console.error("Erro ao atualizar subtarefa:", err);
          });
      }

      function atualizarItem({ tipo, projetoId, tarefaId, subtarefaId, campo, valor, onSuccess }) {
        let url = '';
        let body = {};
        let mensagemSucesso = '';
        let mensagemErro = '';

        switch (tipo) {
          case 'projeto':
            url = `/projetos/${projetoId}`;
            body = { campo, valor };
            mensagemSucesso = 'Projeto atualizado';
            mensagemErro = 'Erro ao atualizar projeto';
            break;
          case 'tarefa':
            url = `/projetos/${projetoId}/tarefas/${tarefaId}`;
            body = { campo, valor };
            mensagemSucesso = 'Tarefa atualizada';
            mensagemErro = 'Erro ao atualizar tarefa';
            break;
          case 'subtarefa':
            url = `/projetos/${projetoId}/tarefas/${tarefaId}/subtarefas/${subtarefaId}`;
            body = { titulo: valor };
            mensagemSucesso = 'Subtarefa atualizada';
            mensagemErro = 'Erro ao atualizar subtarefa';
            break;
          default:
            console.warn('Tipo de entidade desconhecido:', tipo);
            return;
        }

        fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        })
          .then(res => {
            if (!res.ok) throw new Error();
            return res.json();
          })
          .then(() => {
            mostrarPopup(mensagemSucesso);
            if (onSuccess) onSuccess();
          })
          .catch(err => {
            console.error('Erro:', err);
            mostrarPopup(mensagemErro, 'erro');
          });
      }

      function configAutoSave() {
        document.querySelectorAll('.table-input').forEach(input => {
          input.addEventListener('blur', salvarInput);
          input.addEventListener('keydown', function (e) {
            if (e.key === 'Enter') {
              e.preventDefault();
              input.blur();
            }
          });
        });
      }

      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('input[type="checkbox"].auto-save').forEach(cb => {
          cb.addEventListener('change', () => {
            const tipo = cb.dataset.tipo;
            const projetoId = cb.dataset.projetoId;
            const tarefaId = cb.dataset.tarefaId;
            const subtarefaId = cb.dataset.subtarefaId;
            const marcado = cb.checked;

            if (tipo === 'tarefa') {
              concluirTarefa(projetoId, tarefaId, marcado);
            } else if (tipo === 'subtarefa') {
              concluirSubtarefa(projetoId, tarefaId, subtarefaId, marcado);
            }
          });
        });
      });

      configAutoSave();

      function salvarInput(event) {
        const input = event.target;
        const tr = input.closest('tr');

        let valor;
        let valorAnterior;

        if (input.type === 'checkbox') {
          valor = input.checked;
          valorAnterior = input.defaultChecked;
          if (valor === valorAnterior) return;
        } else if (input.tagName === 'SELECT') {
          valor = input.value?.trim() ?? '';
          const selectedOption = input.querySelector('option[selected]');
          valorAnterior = selectedOption ? selectedOption.value.trim() : '';
          if (valor === valorAnterior) return;
        } else if (
          input.type === 'date' ||
          input.type === 'text' ||
          input.tagName === 'TEXTAREA'
        ) {
          valor = input.value?.trim() ?? '';
          valorAnterior = input.defaultValue?.trim() ?? '';
          if (valor === valorAnterior) return;
        } else {
          console.warn('Tipo de input não tratado:', input);
          return;
        }

        const projetoId = input.dataset.projetoId;
        const tarefaId = input.dataset.tarefaId;
        const subtarefaId = input.dataset.subtarefaId;
        const campo = input.dataset?.campo || input.getAttribute('data-campo');

        let tipo = '';
        if (tr.classList.contains('project-row')) {
          tipo = 'projeto';
        } else if (tr.classList.contains('task-row')) {
          tipo = 'tarefa';
        } else if (tr.classList.contains('subtask-row')) {
          tipo = 'subtarefa';
        }

        atualizarItem({
          tipo,
          projetoId,
          tarefaId,
          subtarefaId,
          campo,
          valor,
          onSuccess: () => {
            if (input.type === 'checkbox') {
              input.defaultChecked = input.checked;
            } else {
              input.defaultValue = valor;
              if (input.tagName === 'SELECT') {
                const options = input.querySelectorAll('option');
                options.forEach(opt => opt.removeAttribute('selected'));
                const selected = input.querySelector(`option[value="${valor}"]`);
                if (selected) selected.setAttribute('selected', true);
              }
            }
            socket.emit('projetoAtualizado', {
              tipo,
              projetoId,
              tarefaId,
              subtarefaId,
              campo,
              valor
            });
          }
        });
      }

      function mostrarPopup(mensagem, tipo = 'sucesso') {
        const popup = document.createElement('div');
        popup.className = `popup-msg ${tipo}`;

        const icon = document.createElement('i');
        icon.className = tipo === 'sucesso' ? 'fa fa-check' : 'fa fa-times';
        icon.setAttribute('aria-hidden', 'true');

        popup.appendChild(icon);
        popup.appendChild(document.createTextNode(mensagem));
        document.body.appendChild(popup);

        setTimeout(() => popup.classList.add('visivel'), 10);
        setTimeout(() => {
          popup.classList.remove('visivel');
          setTimeout(() => popup.remove(), 300);
        }, 2500);
      }

      // NOVAS LINHAS
      function criarProjetoSePreenchido(input) {
        const nome = input.value.trim();
        if (!nome) return;

        fetch('/projetos/novo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ nome })
        })
          .then(res => {
            if (!res.ok) throw new Error("Erro ao criar projeto");
            return res.json();
          })
          .then(data => {
            const tabela = document.querySelector('tbody');
            const linhaNovaEntrada = tabela.querySelector('.new-project-row');

            const novaLinha = document.createElement('tr');
            novaLinha.className = "project-row";
            novaLinha.innerHTML = `
        <td class="project-name-cell">
          <button onclick='toggleTarefas("${data.id}")' class="toggle-btn">
            <span id="icone-${data.id}">▸</span>
          </button>
          <input type="text" class="table-input auto-save" value="${nome}"
            data-tipo="projeto" data-projeto-id="${data.id}" data-campo="nome"
            onblur="salvarInput(event)">
        </td>
        <td>
          <select class="table-input auto-save" data-tipo="projeto" data-projeto-id="${data.id}" data-campo="status"
            onblur="salvarInput(event)">
            <option value=""></option>
            <option value="Não iniciado">Não iniciado</option>
            <option value="Em andamento">Em andamento</option>
            <option value="Concluído">Concluído</option>
            <option value="Cancelado">Cancelado</option>
          </select>
        </td>
        <td>
          <input type="date" class="table-input auto-save" data-tipo="projeto" data-projeto-id="${data.id}"
            data-campo="dataInicio" onblur="salvarInput(event)">
        </td>
        <td>
          <input type="date" class="table-input auto-save" data-tipo="projeto" data-projeto-id="${data.id}"
            data-campo="dataPrazo" onblur="salvarInput(event)">
        </td>
        <td>
          <input type="date" class="table-input auto-save" data-tipo="projeto" data-projeto-id="${data.id}"
            data-campo="dataConclusao" onblur="salvarInput(event)">
        </td>`;

            const linhaTarefas = document.createElement('tr');
            linhaTarefas.id = `tarefas-${data.id}`;
            linhaTarefas.className = "hidden nested-container";
            linhaTarefas.innerHTML = `
        <td colspan="5">
          <table class="nested-table">
            <thead>
              <tr>
                <th class="checkbox-col">✓</th>
                <th>Tarefa</th>
                <th>Status</th>
                <th>Início</th>
                <th>Prazo</th>
                <th>Conclusão</th>
              </tr>
            </thead>
            <tbody>
              <tr class="new-task-row">
                <td></td>
                <td>
                  <input type="text" placeholder="Nova tarefa..."
                    class="table-input placeholder"
                    onblur='criarTarefaSePreenchida("${data.id}", this)'>
                </td>
              </tr>
            </tbody>
          </table>
        </td>`;

            tabela.insertBefore(novaLinha, linhaNovaEntrada);
            tabela.insertBefore(linhaTarefas, linhaNovaEntrada);

            novaLinha.scrollIntoView({ behavior: "smooth", block: "center" });
            input.value = '';
          })
          .catch(err => console.error(err));
      }

      function criarTarefaSePreenchida(projId, input) {
        const nome = input.value.trim();
        if (!nome) return;

        fetch(`/projetos/${projId}/tarefas`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ nome })
        })
          .then(res => {
            if (!res.ok) throw new Error("Erro ao adicionar tarefa");
            return res.json();
          })
          .then(data => {
            const tabela = input.closest("table").querySelector("tbody");

            const novaTarefa = document.createElement('tr');
            novaTarefa.className = "task-row";
            novaTarefa.innerHTML = `
        <td class="checkbox-col">
          <input type="checkbox" class="auto-save"
            data-tipo="tarefa" data-projeto-id="${projId}" data-tarefa-id="${data.id}"
            data-campo="concluida" onblur="salvarInput(event)">
        </td>
        <td class="task-name-cell">
          <button onclick="toggleSubtarefas('${projId}', '${data.id}')" class="toggle-btn small">
            <span id="icone-sub-${projId}-${data.id}">▸</span>
          </button>
          <input type="text" class="table-input auto-save"
            data-tipo="tarefa" data-projeto-id="${projId}" data-tarefa-id="${data.id}"
            data-campo="titulo" value="${data.titulo}" onblur="salvarInput(event)">
        </td>
        <td>
          <select class="table-input auto-save" data-tipo="tarefa" data-projeto-id="${projId}"
            data-tarefa-id="${data.id}" data-campo="status" onblur="salvarInput(event)">
            <option value=""></option>
            <option value="Não iniciado">Não iniciado</option>
            <option value="Em andamento">Em andamento</option>
            <option value="Concluído">Concluído</option>
            <option value="Cancelado">Cancelado</option>
          </select>
        </td>
        <td>
          <input type="date" class="table-input auto-save"
            data-tipo="tarefa" data-projeto-id="${projId}" data-tarefa-id="${data.id}"
            data-campo="dataInicio" onblur="salvarInput(event)">
        </td>
        <td>
          <input type="date" class="table-input auto-save"
            data-tipo="tarefa" data-projeto-id="${projId}" data-tarefa-id="${data.id}"
            data-campo="dataPrazo" onblur="salvarInput(event)">
        </td>
        <td>
          <input type="date" class="table-input auto-save"
            data-tipo="tarefa" data-projeto-id="${projId}" data-tarefa-id="${data.id}"
            data-campo="dataConclusao" onblur="salvarInput(event)">
        </td>`;

            tabela.insertBefore(novaTarefa, tabela.lastElementChild);

            const novaLinhaSubtarefas = document.createElement('tr');
            novaLinhaSubtarefas.id = `subtarefas-${projId}-${data.id}`;
            novaLinhaSubtarefas.className = "hidden";
            novaLinhaSubtarefas.innerHTML = `
        <td colspan="6">
          <table class="subtasks-table">
            <thead>
              <tr>
                <th class="checkbox-col">✓</th>
                <th>Subtarefa</th>
              </tr>
            </thead>
            <tbody>
              <tr class="new-subtask-row">
                <td></td>
                <td>
                  <input type="text" placeholder="Nova subtarefa..."
                    class="table-input placeholder"
                    onkeydown='if(event.key === "Enter") criarSubtarefaSePreenchida(this, "${projId}", "${data.id}")'>
                </td>
              </tr>
            </tbody>
          </table>
        </td>`;

            tabela.insertBefore(novaLinhaSubtarefas, tabela.lastElementChild);
            input.value = '';
          })
          .catch(err => console.error(err));
      }

      function criarSubtarefaSePreenchida(input, projId, tarefaId) {
        const nome = input.value.trim();
        if (!nome) {
          console.error("O título da subtarefa não pode estar vazio.");
          return;
        }

        fetch(`/projetos/${projId}/tarefas/${tarefaId}/subtarefas`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ titulo: nome })
        })
          .then(res => {
            if (!res.ok) throw new Error("Erro ao criar subtarefa");
            return res.json();
          })
          .then(data => {
            const tabelaSubtarefas = input.closest("table").querySelector("tbody");
            const novaSubtarefa = document.createElement('tr');
            novaSubtarefa.className = "subtask-row";
            novaSubtarefa.innerHTML = `
              <td class="checkbox-col">
                <input type="checkbox"
                  onblur="concluirSubtarefa('${projId}', '${tarefaId}', '${data.id}', this.checked)">
              </td>
              <td>
                <input type="text" class="table-input" value="${data.titulo}"
                  onblur="salvarInput(event)">
              </td>
            `;
            tabelaSubtarefas.insertBefore(novaSubtarefa, tabelaSubtarefas.lastElementChild);
            input.value = '';
          })
          .catch(err => {
            console.error("Erro ao criar subtarefa:", err);
          });
      }

      let contextTarget = null;

      document.addEventListener('contextmenu', function (e) {
        const linha = e.target.closest('.project-row, .task-row, .subtask-row');
        if (!linha) return;

        e.preventDefault();
        contextTarget = linha;

        const menu = document.getElementById('context-menu');

        // Mostrar temporariamente para medir
        menu.classList.remove('hidden');
        menu.style.visibility = 'hidden';
        menu.style.top = '0';
        menu.style.left = '0';

        const menuWidth = menu.offsetWidth;
        const menuHeight = menu.offsetHeight;
        menu.style.visibility = 'visible';

        let posX = e.clientX + window.scrollX;
        let posY = e.clientY + window.scrollY;

        if (posX + menuWidth > window.innerWidth + window.scrollX) {
          posX = window.innerWidth + window.scrollX - menuWidth;
        }
        if (posY + menuHeight > window.innerHeight + window.scrollY) {
          posY = window.innerHeight + window.scrollY - menuHeight;
        }

        menu.style.left = `${posX - 127}px`;
        menu.style.top = `${posY - 135}px`;
      });

      // Fecha o menu ao clicar fora
      document.addEventListener('click', function (e) {
        const menu = document.getElementById('context-menu');
        if (!menu.contains(e.target)) {
          menu.classList.add('hidden');
        }
      });

      // Fecha com tecla Esc
      document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape') {
          document.getElementById('context-menu').classList.add('hidden');
        }
      });

      function copiarId() {
        const id = contextTarget?.dataset?.projetoId || contextTarget?.dataset?.tarefaId || contextTarget?.dataset?.subtarefaId;
        if (id) {
          navigator.clipboard.writeText(id)
            .then(() => mostrarPopup('ID copiado para a área de transferência'))
            .catch(() => mostrarPopup('Erro ao copiar ID', 'erro'));
        }
        document.getElementById('context-menu').classList.add('hidden')
      }

      function renomear() {
        const input = contextTarget.querySelector('input[type="text"]');
        if (input) {
          input.focus();
          input.select();
        }
        document.getElementById('context-menu').classList.add('hidden')
      }

      function duplicar() {
        // Exemplo: apenas clona visualmente (você pode integrar com backend se desejar)
        const clone = contextTarget.cloneNode(true);
        contextTarget.parentNode.insertBefore(clone, contextTarget.nextSibling);
        mostrarPopup('Item duplicado (apenas visualmente)');
        document.getElementById('context-menu').classList.add('hidden')
      }

      function excluir() {
        const confirmado = confirm("Tem certeza que deseja excluir?");
        if (!confirmado || !contextTarget) return;

        const tipo = contextTarget.dataset.tipo || (
          contextTarget.classList.contains('project-row') ? 'projeto' :
            contextTarget.classList.contains('task-row') ? 'tarefa' :
              contextTarget.classList.contains('subtask-row') ? 'subtarefa' : null
        );

        const projetoId = contextTarget.querySelector('[data-projeto-id]')?.dataset.projetoId;
        const tarefaId = contextTarget.querySelector('[data-tarefa-id]')?.dataset.tarefaId;
        const subtarefaId = contextTarget.querySelector('[data-subtarefa-id]')?.dataset.subtarefaId;

        // Recolher se necessário antes de excluir
        if (tipo === 'projeto') {
          const tarefasRow = document.getElementById(`tarefas-${projetoId}`);
          if (tarefasRow && !tarefasRow.classList.contains('hidden')) {
            toggleTarefas(projetoId); // Recolhe tarefas
          }
        }

        if (tipo === 'tarefa') {
          const subtarefasRow = document.getElementById(`subtarefas-${projetoId}-${tarefaId}`);
          if (subtarefasRow && !subtarefasRow.classList.contains('hidden')) {
            toggleSubtarefas(projetoId, tarefaId); // Recolhe subtarefas
          }
        }

        let url = '';
        switch (tipo) {
          case 'projeto':
            url = `/projetos/${projetoId}`;
            break;
          case 'tarefa':
            url = `/projetos/${projetoId}/tarefas/${tarefaId}`;
            break;
          case 'subtarefa':
            url = `/projetos/${projetoId}/tarefas/${tarefaId}/subtarefas/${subtarefaId}`;
            break;
          default:
            alert("Tipo de item desconhecido.");
            return;
        }

        fetch(url, { method: 'DELETE' })
          .then(res => {
            if (!res.ok) throw new Error("Falha ao excluir");
            contextTarget.remove(); // Só a linha alvo, pois as demais estão escondidas
            mostrarPopup("Item removido");
          })
          .catch(err => {
            console.error(err);
            mostrarPopup("Erro ao excluir", "erro");
          });

        document.getElementById('context-menu').classList.add('hidden');
      }

      socket.on('atualizarItem', ({ tipo, projetoId, tarefaId, subtarefaId, campo, valor }) => {
        // Encontra o input correspondente pelo dataset
        const selector = `.table-input[data-tipo="${tipo}"][data-campo="${campo}"][data-projeto-id="${projetoId}"${tarefaId ? `][data-tarefa-id="${tarefaId}"` : ''
          }${subtarefaId ? `][data-subtarefa-id="${subtarefaId}"` : ''}]`;

        const input = document.querySelector(selector);
        if (input) {
          if (input.type === 'checkbox') {
            input.checked = valor;
            input.defaultChecked = valor;
          } else {
            input.value = valor;
            input.defaultValue = valor;
            if (input.tagName === 'SELECT') {
              const options = input.querySelectorAll('option');
              options.forEach(opt => opt.removeAttribute('selected'));
              const selected = input.querySelector(`option[value="${valor}"]`);
              if (selected) selected.setAttribute('selected', true);
            }
          }
        }
      });
    </script>
    <% } %>